// handlers/ticket.js

const { isUserInGroup, getInviteLink } = require('../utils');
const { tickets } = require('../sessions'); // –î–æ—Å—Ç—É–ø –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∏–∫–µ—Ç–∞–º

module.exports = (bot, botAdmins, userRequests, tickets, adminChatId, groupChatId) => {
    // /ticket (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    bot.onText(/^\/ticket$/, async (msg) => {
        if (msg.chat.type !== 'private') return;
        const userId = msg.from.id;
        const username = msg.from.username ? `@${msg.from.username}` : msg.from.first_name;

        if (!userRequests[userId])
            userRequests[userId] = { acknowledgedRules: false, blocked: false, timestamp: 0, ticketTimestamp: 0, userId, username };

        const user = userRequests[userId];

        if (user.ticketBlocked) {
            try {
                await bot.sendMessage(userId, 'üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫–µ—Ç—ã.');
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        if (!user.acknowledgedRules) {
            try {
                await bot.sendMessage(userId, '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–µ—Ä–µ–∑ /start.');
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        const now = Date.now();
        if (user.ticketTimestamp && now - user.ticketTimestamp < 60000) {
            const remaining = Math.ceil((60000 - (now - user.ticketTimestamp)) / 1000);
            try {
                await bot.sendMessage(userId, `‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ç–∏–∫–µ—Ç–æ–º.`);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        const subscribed = await isUserInGroup(bot, groupChatId, userId);
        if (!subscribed) {
            const inviteLink = await getInviteLink(bot, groupChatId);
            try {
                await bot.sendMessage(userId, 'üìå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç.', {
                    reply_markup: { inline_keyboard: [[{ text: '‚û°Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: inviteLink }]] }
                });
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        try {
            await bot.sendMessage(userId, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ (–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å).');
            user.selectedAction = 'ticket_wait';
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
    });

    // /aticket (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    bot.onText(/^\/aticket (\d+) (.+)/, async (msg, match) => {
        if (!botAdmins.has(msg.from.id)) return;
        if (msg.chat.id.toString() !== adminChatId.toString()) return;

        const ticketId = parseInt(match[1]);
        const replyText = match[2].trim();

        if (!tickets[ticketId]) {
            try {
                await bot.sendMessage(adminChatId, '‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        const { userId, username } = tickets[ticketId];

        try {
            await bot.sendMessage(userId, `üì© *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç #${ticketId}:*\n${replyText}`, { parse_mode: 'Markdown' });
            await bot.sendMessage(adminChatId, `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username} (${userId}) –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}.`);
            delete tickets[ticketId];
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
    });
};