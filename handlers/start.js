// handlers/start.js

const { upsertUserToDB } = require('../db');

module.exports = (bot, botAdmins, userRequests, adminChatId) => {
    bot.onText(/^\/start$/, async (msg) => {
        if (msg.chat.type !== 'private') return;

        const id = msg.from.id;
        const username = msg.from.username ? `@${msg.from.username}` : msg.from.first_name;
        const isNewUser = !userRequests[id];

        userRequests[id] ||= {
            acknowledgedRules: false,
            blocked: false,
            ticketBlocked: false,
            timestamp: 0,
            ticketTimestamp: 0,
            selectedAction: null,
            userId: id,
            username
        };
        const user = userRequests[id];

        const photoUrl = 'https://image.winudf.com/v2/image/bW9iaS5hbmRyb2FwcC5wcm9zcGVyaXR5YXBwcy5jNTExMV9zY3JlZW5fN18xNTI0MDQxMDUwXzAyMQ/screen-7.jpg?fakeurl=1&type=.jpg';

        try {
            if (isNewUser) {
                await bot.sendMessage(adminChatId, `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –±–æ—Ç–µ!`);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', err);
        }

        if (botAdmins.has(Number(id))) {
            user.acknowledgedRules = true; // –ê–¥–º–∏–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω

            try {
                await bot.sendPhoto(id, photoUrl, { caption: `üëã –ü—Ä–∏–≤–µ—Ç, ${username}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.` });

                const adminKeyboard = {
                    inline_keyboard: [
                        [{ text: 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å', callback_data: 'menu_request' }],
                        [{ text: 'üé´ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç', callback_data: 'menu_ticket' }]
                    ]
                };
                await bot.sendMessage(id, `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, { reply_markup: adminKeyboard });
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', err);
            }
            return;
        }

        const keyboard = user.acknowledgedRules
            ? {
                inline_keyboard: [
                    [{ text: 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å', callback_data: 'menu_request' }],
                    [{ text: 'üé´ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç', callback_data: 'menu_ticket' }]
                ]
            }
            : {
                inline_keyboard: [
                    [{ text: 'üìñ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', url: 'https://telegra.ph/Pravila-nashej-gruppy-10-01' }],
                    [{ text: '‚úÖ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è', callback_data: 'ack_rules' }]
                ]
            };

        try {
            await bot.sendPhoto(id, photoUrl, { caption: `üëã –ü—Ä–∏–≤–µ—Ç, ${username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!` });
            await bot.sendMessage(id, `üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, { reply_markup: keyboard });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }

        upsertUserToDB(user);
    });
};