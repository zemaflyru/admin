// handlers/message_processor.js (–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è)

const { isUserInGroup, getInviteLink } = require('../utils');
const { ticketCounter, requestCounter } = require('../sessions');

let currentTicketCounter = 1;
let currentRequestCounter = 1;

module.exports = (bot, userRequests, tickets, requestsQueue, adminChatId, groupChatId) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
    currentTicketCounter = require('../sessions').ticketCounter;
    currentRequestCounter = require('../sessions').requestCounter;

    // –û–ë–©–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô (–¢–ò–ö–ï–¢–´ –ò –ó–ê–ü–†–û–°–´)
    bot.on('message', async (msg) => {
        if (msg.chat.type !== 'private') return;
        const userId = msg.from.id;
        const user = userRequests[userId];
        if (!user || !['ticket_wait', 'request'].includes(user.selectedAction)) return;
        if (msg.text && msg.text.startsWith('/')) return;

        const isTicket = user.selectedAction === 'ticket_wait';
        const now = Date.now();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —ç—Ç–∞–ø–µ –º–µ–Ω—é)
        if (isTicket && user.ticketBlocked) return;
        if (!isTicket && user.blocked) return;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥
        const lastTimeKey = isTicket ? 'ticketTimestamp' : 'timestamp'; // –í –≤–∞—à–µ–º –∫–æ–¥–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è 'timestamp', –∞ –Ω–µ 'requestTimestamp'
        const minInterval = isTicket ? 60000 : 180000;
        if (user[lastTimeKey] && now - user[lastTimeKey] < minInterval) {
            const remaining = Math.ceil((minInterval - (now - user[lastTimeKey])) / 1000);
            try {
                await bot.sendMessage(userId, `‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º ${isTicket ? '—Ç–∏–∫–µ—Ç–æ–º' : '–∑–∞–ø—Ä–æ—Å–æ–º'}.`);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        if (!isTicket) {
            const subscribed = await isUserInGroup(bot, groupChatId, userId);
            if (!subscribed) {
                const inviteLink = await getInviteLink(bot, groupChatId);
                try {
                    await bot.sendMessage(userId, 'üìå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.', {
                        reply_markup: { inline_keyboard: [[{ text: '‚û°Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: inviteLink }]] }
                    });
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                }
                return;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø –∏ –ø–æ–¥–ø–∏—Å–µ–π
        if (!user.tempMedia) user.tempMedia = [];
        if (!user.lastCaption) user.lastCaption = '';

        if (msg.photo) user.tempMedia.push({ type: 'photo', media: msg.photo.at(-1).file_id });
        else if (msg.video) user.tempMedia.push({ type: 'video', media: msg.video.file_id });
        else if (msg.document) user.tempMedia.push({ type: 'document', media: msg.document.file_id });
        else if (msg.voice) user.tempMedia.push({ type: 'voice', media: msg.voice.file_id });

        if (msg.caption) user.lastCaption = msg.caption;
        else if (msg.text && !msg.media_group_id) user.lastCaption = msg.text;

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        clearTimeout(user.mediaTimeout);
        user.mediaTimeout = setTimeout(() => finalizeMessage(userId), msg.media_group_id ? 1500 : 500);
    });

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    async function finalizeMessage(uid) {
        const usr = userRequests[uid];
        if (!usr || usr._finalizing) return;
        usr._finalizing = true;

        const isTicket = usr.selectedAction === 'ticket_wait';
        const sessions = require('../sessions'); // –î–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å—á—ë—Ç—á–∏–∫–∞–º

        const idCounter = isTicket ? sessions.ticketCounter++ : sessions.requestCounter++;
        const caption = usr.lastCaption?.trim() || '(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)';

        const adminCaption = isTicket
            ? `üì© *–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #${idCounter}*\nüë§ ${usr.username} (${uid})\nüí¨ ${caption}\n\n–î–ª—è –æ—Ç–≤–µ—Ç–∞:\n/aticket ${idCounter} <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>`
            : `üì® *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #${idCounter}*\nüë§ [${usr.username}](tg://user?id=${uid})\nüÜî ${uid}\nüí¨ ${caption}`;

        const adminKeyboard = {
            inline_keyboard: isTicket
                ? [[{ text: usr.ticketBlocked ? 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `ticket_toggleBlock_${uid}_${idCounter}` }]]
                : [[
                    { text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: `req_${idCounter}_publish` },
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `req_${idCounter}_reject` },
                    { text: usr.blocked ? 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : 'üîí –ë–ª–æ–∫/–†–∞–∑–±–ª–æ–∫', callback_data: `req_${idCounter}_block` }
                ]],
        };

        try {
            await bot.sendMessage(uid, `‚úÖ –í–∞—à ${isTicket ? '—Ç–∏–∫–µ—Ç' : '–∑–∞–ø—Ä–æ—Å'} #${idCounter} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.`);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', err);
        }

        try {
            if (usr.tempMedia.length > 0) {
                const mediaGroup = usr.tempMedia.map((m, i) => ({
                    type: m.type === 'voice' ? 'audio' : m.type,
                    media: m.media,
                    caption: i === 0 ? adminCaption : undefined,
                    parse_mode: 'Markdown'
                }));

                if (usr.tempMedia.length === 1 && mediaGroup[0].type !== 'audio') {
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    const m = usr.tempMedia[0];
                    const sendOpts = { caption: adminCaption, parse_mode: 'Markdown' };
                    let sentMsg;
                    switch (m.type) {
                        case 'photo': sentMsg = await bot.sendPhoto(adminChatId, m.media, sendOpts); break;
                        case 'video': sentMsg = await bot.sendVideo(adminChatId, m.media, sendOpts); break;
                        case 'document': sentMsg = await bot.sendDocument(adminChatId, m.media, sendOpts); break;
                        case 'voice': sentMsg = await bot.sendVoice(adminChatId, m.media, sendOpts); break;
                        default: sentMsg = await bot.sendMessage(adminChatId, adminCaption, { parse_mode: 'Markdown' });
                    }
                    try {
                        await bot.sendMessage(adminChatId, '‚¨áÔ∏è –î–µ–π—Å—Ç–≤–∏—è', { reply_to_message_id: sentMsg.message_id, reply_markup: adminKeyboard });
                    } catch (err) {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫:', err);
                    }
                } else {
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤–æ–π—Å–∞
                    const sentGroup = await bot.sendMediaGroup(adminChatId, mediaGroup);
                    const firstMsgId = sentGroup[0].message_id;
                    try {
                        await bot.sendMessage(adminChatId, '‚¨áÔ∏è –î–µ–π—Å—Ç–≤–∏—è', { reply_to_message_id: firstMsgId, reply_markup: adminKeyboard });
                    } catch (err) {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫:', err);
                    }
                }
            } else {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞
                await bot.sendMessage(adminChatId, adminCaption, { parse_mode: 'Markdown', reply_markup: adminKeyboard });
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', err);
            try {
                // Fallback –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
                await bot.sendMessage(adminChatId, adminCaption, { parse_mode: 'Markdown', reply_markup: adminKeyboard });
            } catch (fallbackErr) {
                console.error('–û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏:', fallbackErr);
            }
        }

        const now = Date.now(); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑

        if (isTicket) {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ –æ–±—ä–µ–∫—Ç —Ç–∏–∫–µ—Ç–∞
            tickets[idCounter] = { userId: uid, username: usr.username, text: caption, media: usr.tempMedia || [], timestamp: now };
            usr.ticketTimestamp = now;
        } else {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
            requestsQueue[idCounter] = { userId: uid, username: usr.username, text: caption, media: usr.tempMedia || [], timestamp: now };
            usr.timestamp = now;
        }

        usr.selectedAction = null;
        usr.tempMedia = [];
        usr.lastCaption = '';
        usr._finalizing = false;
    }
};