// handlers/callback_query.js

const { upsertUserToDB } = require('../db');
// ‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ escapeMarkdown –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ utils.js
const { isUserInGroup, getInviteLink, isKeyboardChanged, escapeMarkdown } = require('../utils'); 
const { MESSAGES, generateAdminKeyboard, RULES_URL, MAIN_MENU_KEYBOARD } = require('../messages/texts'); 

// üîë –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ó–∞–ø—Ä–æ—Å–∞ (req_)
function generateAdminKeyboardForRequest(reqId, isBlocked) {
    return {
        inline_keyboard: [
            [
                {
                    text: isBlocked ? 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã' : 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã',
                    callback_data: `req_${reqId}_block`
                },
                {
                    text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                    callback_data: `req_${reqId}_reject`
                },
                {
                    text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                    callback_data: `req_${reqId}_publish`
                }
            ]
        ]
    };
}

// üîë –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¢–∏–∫–µ—Ç–∞ (ticket_)
function generateAdminKeyboardForTicket(ticketId, targetUserId, isBlocked) {
    return {
        inline_keyboard: [
            [{
                text: isBlocked ? 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã' : 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã',
                callback_data: `ticket_toggleBlock_${targetUserId}_${ticketId}` 
            }]
        ]
    };
}

module.exports = (bot, botAdmins, userRequests, requestsQueue, tickets, rejectSessions, adminMessageSessions, adminChatId, groupChatId) => {
    bot.on('callback_query', async (query) => {
        const id = query.from.id;
        const data = query.data;

        const user = userRequests[id] ||= {
            blocked: false,
            ticketBlocked: false,
            userId: id,
            username: query.from.username ? `@${query.from.username}` : query.from.first_name
        };
        
        // --- 1. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–∞/–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ /tickets –∏–ª–∏ /requests (–û–ë–ù–û–í–õ–ï–ù–û) ---
        if (data.startsWith('showTicket_') || data.startsWith('showRequest_')) {
            if (!botAdmins.has(id)) return bot.answerCallbackQuery(query.id, { text: '‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!' });
            
            const isTicket = data.startsWith('showTicket_');
            const itemId = data.split('_')[1];
            const queue = isTicket ? tickets : requestsQueue;
            const item = queue[itemId];
            const chatId = query.message.chat.id;

            await bot.answerCallbackQuery(query.id, { text: isTicket ? `–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–∞ #${itemId}` : `–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ #${itemId}` });

            if (!item) {
                return bot.sendMessage(chatId, isTicket ? '‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.' : '‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
            }

            const { userId, username, text, media } = item;
            const targetUser = userRequests[userId] ||= { blocked: false, ticketBlocked: false, userId: userId, username: username };
            const type = isTicket ? '–¢–ò–ö–ï–¢' : '–ó–ê–ü–†–û–°';
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            let adminCaption = 
                `*${isTicket ? 'üé´' : 'üì®'} –°–û–î–ï–†–ñ–ê–ù–ò–ï ${type}–ê #${itemId}*` +
                ` –æ—Ç ${escapeMarkdown(username || `ID:${userId}`)} ([${userId}](tg://user?id=${userId}))\n\n` +
                `*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*\n${escapeMarkdown(text || '(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)')}`; // ‚úÖ –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç

            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–¢–í–ï–¢–ê –ù–ê –¢–ò–ö–ï–¢
            if (isTicket) {
                adminCaption += `\n\n------------------------\n`
                             + `*‚úçÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:* \`/aticket ${itemId}\``; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥-–±–ª–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            }
            
            const adminKeyboard = isTicket 
                ? generateAdminKeyboardForTicket(itemId, userId, targetUser.ticketBlocked) 
                : generateAdminKeyboardForRequest(itemId, targetUser.blocked);

            try {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                if (media && media.length > 0) {
                    if (media.length > 1) {
                        const mediaGroup = media.map((m, index) => ({
                            type: m.type,
                            media: m.media,
                            caption: index === 0 ? adminCaption : undefined, 
                            parse_mode: index === 0 ? 'Markdown' : undefined
                        }));
                        await bot.sendMediaGroup(chatId, mediaGroup);
                        if (adminKeyboard) {
                            await bot.sendMessage(chatId, '‚¨áÔ∏è –î–µ–π—Å—Ç–≤–∏—è', { reply_markup: adminKeyboard });
                        }
                    } else if (media.length === 1 && media[0].type) {
                        const singleMedia = media[0];
                        let method = '';
                        if (singleMedia.type === 'photo') method = 'sendPhoto';
                        else if (singleMedia.type === 'video') method = 'sendVideo';
                        else if (singleMedia.type === 'document') method = 'sendDocument';
                        else if (singleMedia.type === 'voice') method = 'sendVoice';
                        
                        if (method) {
                            await bot[method](chatId, singleMedia.media, { 
                                caption: adminCaption, 
                                parse_mode: 'Markdown', 
                                reply_markup: adminKeyboard
                            });
                        } else {
                             await bot.sendMessage(chatId, adminCaption + '\n\n‚ö†Ô∏è *–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞.*', { parse_mode: 'Markdown', reply_markup: adminKeyboard });
                        }
                    } 
                } else {
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞
                    await bot.sendMessage(chatId, adminCaption, { parse_mode: 'Markdown', reply_markup: adminKeyboard });
                }

            } catch (err) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ${type}–∞ #${itemId}:`, err);
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
            }
            return;
        }

        // --- 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /get (Toggle Blocks –∏ Write User) ---

        if (data.startsWith('toggleBlockReq_')) {
            if (!botAdmins.has(id)) return bot.answerCallbackQuery(query.id, { text: '‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!' });

            const uid = parseInt(data.split('_')[1]);
            const usr = userRequests[uid] ||= { blocked: false, ticketBlocked: false, userId: uid, username: `ID:${uid}` };
            usr.blocked = !usr.blocked;
            upsertUserToDB(usr);

            const adminName = userRequests[id]?.username || `ID:${id}`;
            try {
                await bot.sendMessage(adminChatId, usr.blocked
                    ? `üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${usr.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ [${adminName}](tg://user?id=${id}).`
                    : `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${usr.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ [${adminName}](tg://user?id=${id}).`,
                    { parse_mode: 'Markdown' }
                );

                // –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º generateAdminKeyboard
                await bot.editMessageReplyMarkup(generateAdminKeyboard(usr.blocked, usr.ticketBlocked), {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id
                });

                await bot.answerCallbackQuery(query.id, { text: usr.blocked ? 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤' : '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤' });
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:', err);
            }
            return;
        }

        if (data.startsWith('toggleBlockTicket_')) {
            if (!botAdmins.has(id)) return bot.answerCallbackQuery(query.id, { text: '‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!' });

            const uid = parseInt(data.split('_')[1]);
            const usr = userRequests[uid] ||= { blocked: false, ticketBlocked: false, userId: uid, username: `ID:${uid}` };
            usr.ticketBlocked = !usr.ticketBlocked;
            upsertUserToDB(usr);

            const adminName = userRequests[id]?.username || `ID:${id}`;
            try {
                await bot.sendMessage(adminChatId, usr.ticketBlocked
                    ? `üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${usr.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ [${adminName}](tg://user?id=${id}).`
                    : `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${usr.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ [${adminName}](tg://user?id=${id}).`,
                    { parse_mode: 'Markdown' }
                );

                // –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º generateAdminKeyboard
                await bot.editMessageReplyMarkup(generateAdminKeyboard(usr.blocked, usr.ticketBlocked), {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id
                });

                await bot.answerCallbackQuery(query.id, { text: usr.ticketBlocked ? 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤' : '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤' });
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤:', err);
            }
            return;
        }

        if (data.startsWith('writeUser_')) {
            if (!botAdmins.has(id)) return bot.answerCallbackQuery(query.id, { text: '‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!' });

            const uid = parseInt(data.split('_')[1]);
            const usr = userRequests[uid];

            if (!usr) {
                return bot.answerCallbackQuery(query.id, { text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
            }

            adminMessageSessions[id] = uid;

            try {
                await bot.sendMessage(adminChatId, MESSAGES.WRITE_USER_PROMPT(usr.username));
                await bot.answerCallbackQuery(query.id, { text: 'üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω —á–∞—Ç' });
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        // --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ /start (–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏) ---

        if (data === 'ack_rules') {
            user.acknowledgedRules = true;
            upsertUserToDB(user);
            try {
                await bot.sendMessage(id, '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏ —Ç–∏–∫–µ—Ç—ã.', {
                    reply_markup: MAIN_MENU_KEYBOARD 
                });
                await bot.answerCallbackQuery(query.id);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        // --- 4. –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞/—Ç–∏–∫–µ—Ç–∞ ---

        if (data === 'menu_request') {
            if (user.blocked) {
                return bot.answerCallbackQuery(query.id, { text: 'üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã.' });
            }
            if (!user.acknowledgedRules) {
                return bot.answerCallbackQuery(query.id, { text: '–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–µ—Ä–µ–∑ /start.' });
            }
            const subscribed = await isUserInGroup(bot, groupChatId, id);
            if (!subscribed) {
                const inviteLink = await getInviteLink(bot, groupChatId);
                return bot.sendMessage(id, 'üìå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.', {
                    reply_markup: { inline_keyboard: [[{ text: '‚û°Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: inviteLink }]] }
                });
            }
            user.selectedAction = 'request';
            try {
                await bot.sendMessage(id, 'üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.');
                await bot.answerCallbackQuery(query.id);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        if (data === 'menu_ticket') {
            if (user.ticketBlocked) {
                return bot.answerCallbackQuery(query.id, { text: 'üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫–µ—Ç—ã.' });
            }
            if (!user.acknowledgedRules) {
                return bot.answerCallbackQuery(query.id, { text: '–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–µ—Ä–µ–∑ /start.' });
            }
            const subscribed = await isUserInGroup(bot, groupChatId, id);
            if (!subscribed) {
                const inviteLink = await getInviteLink(bot, groupChatId);
                return bot.sendMessage(id, 'üìå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–∫–µ—Ç–∞.', {
                    reply_markup: { inline_keyboard: [[{ text: '‚û°Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: inviteLink }]] }
                });
            }
            user.selectedAction = 'ticket_wait';
            try {
                await bot.sendMessage(id, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ (–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å).');
                await bot.answerCallbackQuery(query.id);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            }
            return;
        }

        // --- 5. –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ (req_) –∏ –∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ---

        if (data.startsWith('req_')) {
            if (!botAdmins.has(id)) return bot.answerCallbackQuery(query.id, { text: '‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω, –ø–æ—à—ë–ª –≤–æ–Ω!' });

            const [_, reqId, action] = data.split('_');
            const req = requestsQueue[reqId];
            if (!req) return bot.answerCallbackQuery(query.id, { text: '‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.' });

            const targetUser = userRequests[req.userId] ||= { blocked: false, ticketBlocked: false, userId: req.userId, username: req.username };

            switch (action) {
                case 'publish': {
                    try {
                        // –õ–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É
                        if (req.media && req.media.length > 0) {
                            if (req.media.length === 1) {
                                const m = req.media[0];
                                const opts = { caption: req.text || undefined, parse_mode: 'Markdown' };
                                switch (m.type) {
                                    case 'photo': await bot.sendPhoto(groupChatId, m.media, opts); break;
                                    case 'video': await bot.sendVideo(groupChatId, m.media, opts); break;
                                    case 'document': await bot.sendDocument(groupChatId, m.media, opts); break;
                                    case 'voice': await bot.sendVoice(groupChatId, m.media, opts); break;
                                    default: await bot.sendMessage(groupChatId, req.text || '(–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)');
                                }
                            } else {
                                const mediaGroup = req.media.map((m, i) => ({
                                    type: m.type === 'voice' ? 'audio' : m.type,
                                    media: m.media,
                                    caption: i === 0 ? req.text || undefined : undefined,
                                    parse_mode: 'Markdown'
                                }));
                                await bot.sendMediaGroup(groupChatId, mediaGroup);
                            }
                        } else {
                            await bot.sendMessage(groupChatId, req.text || '(–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å)');
                        }

                        await bot.sendMessage(req.userId, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ.');
                        const adminName = userRequests[id]?.username || `ID: ${id}`;
                        await bot.sendMessage(adminChatId, `‚úÖ –ó–∞–ø—Ä–æ—Å #${reqId} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º [${adminName}](tg://user?id=${id}).`, { parse_mode: 'Markdown' });
                        delete requestsQueue[reqId];
                        
                        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: query.message.chat.id, message_id: query.message.message_id });
                        await bot.answerCallbackQuery(query.id, { text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' });
                        return;
                    } catch (err) {
                        console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', err);
                        return bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚ùå' });
                    }
                }

                case 'reject': {
                    rejectSessions[id] = reqId;
                    try {
                        const adminId = id; 
                        const adminName = userRequests[adminId]?.username || `ID:${adminId}`;
                        
                        const rejectMessage = MESSAGES.REJECT_PROMPT(adminName, reqId, adminId);
                        
                        await bot.sendMessage(adminChatId, rejectMessage, { parse_mode: 'Markdown' });
                        await bot.answerCallbackQuery(query.id, { text: '‚úèÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...' });
                    } catch (err) {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                        return bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.' });
                    }
                    return;
                }

                case 'block': {
                    targetUser.blocked = !targetUser.blocked;
                    upsertUserToDB(targetUser);
                    const blocked = targetUser.blocked;
                    
                    const adminName = userRequests[id]?.username || `ID: ${id}`;
                    await bot.sendMessage(adminChatId, blocked
                        ? `üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–æ–º [${adminName}](tg://user?id=${id}).`
                        : `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–æ–º [${adminName}](tg://user?id=${id}).`,
                        { parse_mode: 'Markdown' }
                    );
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º generateAdminKeyboardForRequest
                    const newKeyboard = generateAdminKeyboardForRequest(reqId, blocked);

                    await bot.editMessageReplyMarkup(newKeyboard, {
                        chat_id: query.message.chat.id,
                        message_id: query.message.message_id
                    });

                    await bot.answerCallbackQuery(query.id, { text: blocked ? 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤' : '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤' });
                    return;
                }

                default: {
                    return bot.answerCallbackQuery(query.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
                }
            }
        }
        
        // --- 6. –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —Ç–∏–∫–µ—Ç–∞–º–∏ (ticket_toggleBlock_) ---

        if (data.startsWith('ticket_toggleBlock_')) {
            if (!botAdmins.has(id)) return bot.answerCallbackQuery(query.id, { text: '‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!' });

            const parts = data.split('_');
            const userIdTarget = parseInt(parts[2]);
            const ticketId = parts[3]; 

            const targetUser = userRequests[userIdTarget] ||= { blocked: false, ticketBlocked: false, userId: userIdTarget, username: `ID:${userIdTarget}` };
            targetUser.ticketBlocked = !targetUser.ticketBlocked;
            upsertUserToDB(targetUser);
            const blocked = targetUser.ticketBlocked;

            try {
                await bot.sendMessage(userIdTarget, blocked
                    ? 'üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫–µ—Ç—ã.'
                    : '‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∏–∫–µ—Ç—ã.'
                );

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                const updatedKeyboard = generateAdminKeyboardForTicket(ticketId, userIdTarget, blocked);

                await bot.editMessageReplyMarkup(updatedKeyboard, {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id
                });

                const adminName = userRequests[id]?.username || `ID: ${id}`;
                await bot.sendMessage(adminChatId, blocked
                    ? `üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–º [${adminName}](tg://user?id=${id}).`
                    : `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–º [${adminName}](tg://user?id=${id}).`,
                    { parse_mode: 'Markdown' }
                );

                await bot.answerCallbackQuery(query.id, { text: blocked ? 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤' : '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤' });
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤:', err);
            }
        }
    });
};